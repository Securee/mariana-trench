/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

package com.facebook.marianatrench.integrationtests;

import android.app.Activity;
import android.content.Intent;

class ExportedActivity extends Activity {
  private Object mSource;

  @Override
  protected void onCreate() {
    mSource = Origin.source();
    ExploitabilityRule.testExported(this);
  }

  @Override
  protected void onStart() {
    // FN: Should find issue even if call-chain source and sink
    // are on the same callable.
    Origin.sink(Origin.source());
    // FN based on manifest model generator: We currently mark
    // callees of lifecycle wrappers as exported and not the
    // lifecycle wrapper itself.
    Origin.sink(mSource);
    ExploitabilityRule.testMultihopExported(this);
  }

  protected Intent getIntentHop1() {
    return getIntentHop2();
  }

  protected Intent getIntentHop2() {
    return this.getIntent();
  }
}

class UnexportedActivity extends Activity {
  private Object mSource;

  @Override
  protected void onCreate() {
    mSource = Origin.source();
    ExploitabilityRule.testUnexported(this);
  }

  @Override
  protected void onStart() {
    Origin.sink(mSource);
  }
}

public class ExploitabilityRule {
  static void hopToSink(Object data) {
    Origin.sink(data);
  }

  static void testExported(Activity activity) {
    // Expect issue: Source/Sink flow here + testExported() is "exported" via
    // ExportedActivity::onCreate()
    Origin.sink(activity.getIntent());
  }

  static void testUnexported(Activity activity) {
    // Expect no issue: Source/Sink flow here. But testUnexported()
    // called from UnexportedActivitiy::onCreate() is not "exported"
    Origin.sink(activity.getIntent());
  }

  static void testMultihopExported(ExportedActivity activity) {
    // Expect issue: Source/Sink flow here + testExported() is "exported" via
    // ExportedActivity::onCreate()
    hopToSink(activity.getIntentHop1());
  }
}
