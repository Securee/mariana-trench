/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

#pragma once

#include <unordered_map>

#include <mariana-trench/IncludeMacros.h>
#include <mariana-trench/SourceSinkWithExploitabilityRule.h>
#include <mariana-trench/Taint.h>
#include <mariana-trench/TaintTree.h>

namespace marianatrench {

class FulfilledExploitabilityRuleState final {
 public:
  FulfilledExploitabilityRuleState() = default;

  INCLUDE_DEFAULT_COPY_CONSTRUCTORS_AND_ASSIGNMENTS(
      FulfilledExploitabilityRuleState)

  Taint fulfill_exploitability_rule(
      const IRInstruction* instruction,
      const SourceSinkWithExploitabilityRule* rule,
      const Taint& exploitability_sources,
      const Taint& source_as_transform_sinks);

  Taint partially_fulfilled_sinks(const IRInstruction* instruction) const;
  Taint fulfilled_sinks(const IRInstruction* instruction) const;

 private:
  void partially_fulfill_rule(
      const SourceSinkWithExploitabilityRule* rule,
      const Taint& source_as_transform_sinks);

  void fulfill_rule(
      const SourceSinkWithExploitabilityRule* rule,
      const Taint& source_as_transform_sinks);

 private:
  std::unordered_map<
      const IRInstruction*,
      std::unordered_set<const SourceSinkWithExploitabilityRule*>>
      instruction_to_rules_;
  std::unordered_map<const SourceSinkWithExploitabilityRule*, Taint>
      partially_fulfilled_rules_to_source_as_transform_sinks_;
  std::unordered_map<const SourceSinkWithExploitabilityRule*, Taint>
      fulfilled_rules_to_source_as_transform_sinks_;
};

} // namespace marianatrench
